<?php

function school_dashboard_civicrm_config(){
    
    //NOTE: this is ACL by restriction, which is different to how Drupal CiviCRM normally do things, i.e. this module restricts access rather than permits access.
    // More specifically, this module takes away permissions that are granted by the access CiviCRM permission, which AFAIK is not the normal way to do things in Drupal and CiviCRM.
    
    //only for people with the access school dashboard permission
    if(!user_access('access school dashboard')){
        return;
    }

    //only when we are on a civicrm page
    if(arg(0)!='civicrm'){
        return;
    }
    
    //hide the menu bar
    drupal_add_js(drupal_get_path('module', 'school_dashboard').'/js/remove-civicrm-menu.js');
    $path=implode(arg(),'/');
    
    //define accessible paths
    $accessible_paths=array(
        'civicrm/report/instance/41',
        'civicrm/profile/view',
        'civicrm/profile/edit',
    );
    
    //if you aren't on the list of accessible paths, redirect to some page with a message
    if(!in_array($path, $accessible_paths)){
        drupal_set_message('You are not allowed to access this page.');
        drupal_goto('school-dashboard');
    }
}

function school_dashboard_permission() {
  return array(
      'access school dashboard' => array(
        'title' => t('Access school dashboard (and restrict access to the rest of CiviCRM)'), 
        'description' => t('Allows teachers to access the school dashboard and see signed up students.'),
        ),
      );
}

function school_dashboard_block_info() {
	$blocks['students-by-year'] = array(
		'info' => t('School dashboard - students by year'),
	);
	$blocks['recent-leavers'] = array(
		'info' => t('School dashboard - recent leavers'),
	);
	$blocks['summary-info'] = array(
		'info' => t('School dashboard - summary info'),
	);
	return $blocks;
}

function school_dashboard_block_view($delta = '') {
    civicrm_initialize();
    require_once 'CRM/Report/Form/Alumni/Alumni.php';
    $alumni_report = new CRM_Report_Form_Alumni_Alumni;
    $years = $alumni_report->getAlumniYears();
    $totalStudents = $alumni_report->getTotalStudents();
    
    switch ($delta){
        case 'recent-leavers':
	        $block['subject'] = 'Recent leavers';
			$block['content'] = school_dashboard_recent_leavers_block();
			break;
        case 'summary-info':
            $block['subject'] = 'Summary info';
			$block['content'] = school_dashboard_summary_info_block($totalStudents, $years);
			break;
        case 'students-by-year':
            $block['subject'] = 'Students by year';
			$block['content'] = school_dashboard_students_by_year_block($years);
			break;
	}
	return $block;			
}

function school_dashboard_recent_leavers_block(){
    drupal_add_js(drupal_get_path('module', 'school_dashboard').'/js/recent-leavers.js');
    return '<p>Here are the latest students from your current cohort who have signed up to your alumni network</p><div id="recent_leavers"></div>';
}

function school_dashboard_summary_info_block($totalStudents, $years){
    $countYears=count($years);
    return "<p>You now have <span class='leavers'>{$totalStudents}</span> alumni in <span class='years'>{$countYears}</span> different years.</b><p>";
}


function school_dashboard_civicrm_pageRun($page){
    if(get_class($page)=='CRM_Profile_Page_Dynamic' && $page->getVar('_gid')==15){
        CRM_Utils_System::setTitle(strip_tags(drupal_get_title()));
        drupal_add_js(drupal_get_path('module', 'school_dashboard').'/js/hide-empty-profile-fields.js');
        
    }
}

function school_dashboard_students_by_year_block($years){
    
    $year_links['type'] = 'ul';
    $year_links['attributes'] = array();

    foreach ($years as $year => $link){
        $year_links['items'][] = "<a href='/school-dashboard/report?force=1&year_value={$year}'>{$link}</a>";
    }    
    return theme_item_list($year_links);
}


function school_dashboard_get_school_for_contact($contact_id){
    return 8123;
    $params[1]=array($contact_id, 'Integer');
    $sql="SELECT contact_id_b FROM civicrm_relationship AS cr WHERE cr.relationship_type_id=10 AND contact_id_a=%1";
    $result = CRM_Core_DAO::ExecuteQuery($params, $sql);
    $result->fetch();
}

function school_dashboard_civicrm_aclWhereClause($type, &$tables, &$whereTables, &$contactID, &$where) {
    
    // $type - we only want to grant view and edit permissions
    if (($type != CRM_ACL_API::VIEW) and ($type != CRM_ACL_API::EDIT)) {
        return;
    }

    // if they are logged out, do not grant permissions
    if ( ! $contactID ) {
        return;
    }
    // try and get the teachers school
    $school = school_dashboard_get_school_for_contact($contactID);
    
    // if they don't have a school, don't grant permissions
    if(!$school){
        return;
    }

    $school_info_table='civicrm_value_contact_reference_9';
    $whereTables[$school_info_table] = "LEFT JOIN {$school_info_table} AS school_info_table ON contact_a.id = school_info_table.entity_id";
    $where .= "school_info_table.contact_reference_21 = {$school}";
}