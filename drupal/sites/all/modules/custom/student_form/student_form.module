<?php
// a block for displaying the school name

function student_form_menu(){
        $items['signup'] = $items['signup-ark'] = $items['alumni'] = array(
                'title' => 'Redirect',
                'page callback' => 'student_form_redirect',
                'access arguments' => array('access content'),
                'type' => MENU_CALLBACK,
        );
	return $items;	
}

function student_form_block_info() {
	$blocks['school-name'] = array(
		'info' => t('School name'),
	);
	$blocks['student-search'] = array(
		'info' => t('Student search'),
	);
	$blocks['former-student-search'] = array(
		'info' => t('Former student search'),
	);
	return $blocks;
}

function student_form_block_view($delta = '') {
    switch ($delta){
        case 'school-name':
        	$school = student_form_get_school();
        	$block['content'] = $school['display_name'];
        	break;
        case 'student-search':
        	$block['content'] = student_form_student_search_block();
        	break;
        case 'former-student-search':
        	$block['content'] = student_form_former_student_search_block();
        	break;
	}
	return $block;
}

function student_form_redirect($argument){
    if($argument=='thekightstemplar'){
		drupal_goto('student/theknightstemplar');
	}
    $page = arg(0);
    $redirects=array(
        'signup'=>'student',
        'signup-ark'=>'student-ark',
        'alumni'=>'former-student'
    );
	drupal_goto("{$redirects[$page]}/{$argument}");    
}

function student_form_theme(){
  return array(
      'student_form_list'=>array(
        'variables' => array('list' => NULL, 'links' => NULL),
        'template' => 'student-form-list'
        )
      );
}

function student_form_former_student_search_block(){
    civicrm_initialize();
    $query="
        SELECT
            school.id AS school_id,
            school.organization_name AS school_name,
            mem.id AS membership_id,
            school_cd.short_name_26 AS short_name,
            IF(mem_status.is_current_member,'member','non-member') AS is_member

        FROM
            civicrm_contact AS school
        JOIN
            civicrm_value_school_1 AS school_cd ON school_cd.entity_id=school.id
        LEFT JOIN
            civicrm_membership AS mem ON school.id=mem.contact_id
        LEFT JOIN
            civicrm_membership_status AS mem_status ON mem.status_id=mem_status.id

        WHERE
            !school.is_deleted

        ORDER BY        
            school_name";

    $result = CRM_Core_DAO::executeQuery( $query );

    $web_form_translate=array('member' => 'former-student', 'non-member' => 'former-student-nms');

    while($result->fetch()){
        $list[]=array('id' => $result->school_id, 'name' => $result->school_name);
        $links[$result->school_id]="{$web_form_translate[$result->is_member]}/{$result->short_name}";        
    }
    drupal_add_js(libraries_get_path('tokeninput').'/src/jquery.tokeninput.js');
    drupal_add_js(drupal_get_path('module', 'student_form').'/js/student_form_autocomplete.js');
    drupal_add_css(drupal_get_path('module', 'webform_civicrm') . '/token-input.css');
    return theme('student_form_list', array('list' => drupal_json_encode($list),'links' => drupal_json_encode($links)));
}


function student_form_student_search_block(){
    civicrm_initialize();
    $query="
        SELECT
        school.id AS school_id,
        school.organization_name AS school_name,
        school_cd.short_name_26 AS short_name,
        IF(tag.id,'ark','non-ark') AS is_ark
        

        FROM
        civicrm_contact AS school
        JOIN
        civicrm_value_school_1 AS school_cd ON school_cd.entity_id=school.id
        JOIN
        civicrm_membership AS mem ON school.id = mem.contact_id
        LEFT JOIN
        civicrm_entity_tag AS tag ON school.id=tag.entity_id AND tag_id=6

        WHERE !school.is_deleted

        ORDER BY school_name";
        
    $result = CRM_Core_DAO::executeQuery( $query );

    $web_form_translate=array('non-ark' => 'student', 'ark' => 'student-ark');

    while($result->fetch()){
        $list[]=array('id' => $result->school_id, 'name' => $result->school_name);
        $links[$result->school_id]="{$web_form_translate[$result->is_ark]}/{$result->short_name}";        
    }
    drupal_add_js(libraries_get_path('tokeninput').'/src/jquery.tokeninput.js');
    drupal_add_js(drupal_get_path('module', 'student_form').'/js/student_form_autocomplete.js');
    drupal_add_css(drupal_get_path('module', 'webform_civicrm') . '/token-input.css');
    return theme('student_form_list', array('list' => drupal_json_encode($list),'links' => drupal_json_encode($links)));
}

function student_form_get_school(){
	civicrm_initialize();
	$school_short_name = arg(2);
	if(!strlen($school_short_name)){
		if(!strlen($_SESSION['student_form']['school_short_name'])){
			return FALSE;
		}else{
			$school_short_name = $_SESSION['student_form']['school_short_name'];
		}
	}	
	//query to see if the reference exists
	$sql = 'SELECT entity_id FROM civicrm_value_school_1 WHERE short_name_26=%1';
	$params[1] = array($school_short_name, 'String');
	$result = CRM_Core_DAO::executeQuery( $sql, $params);
	if(!$result->fetch()){
		return FALSE;
	};
	$contact_id = $result->entity_id;
	$params = array('version'=>3, 'id'=>$contact_id);
	$school = civicrm_api('Contact', 'getsingle', $params);
	return $school;

}
//function student_form_get_school_from_url(){}
function student_from_get_membership($contact_id){
	$membership_params = array (
		'version' =>'3',
		'contact_id' => $contact_id
	);
	$membership_result=civicrm_api("membership", "get", $membership_params);
	if($membership_result['count']==0){
		return FALSE;
	}else{
		return $membership_result;
	}
}

function student_form_node_view($node){
  global $user;
  if($node->nid==5 OR $node->nid==8 or $node->nid==14 or $node->nid==17){
		drupal_add_js(drupal_get_path( 'module', 'student_form')."/js/webform-hide-fields-node-{$node->nid}.js" ); 
		$school = student_form_get_school();
		if(!$school){
			drupal_goto('student/error');
		}elseif(!arg(2)){
			$signup_paths=array(5=>'student-ark', 8=>'student', 14=>'former-student', 17=>'former-student-nms');
			drupal_goto($signup_paths[$node->nid].'/'.$_SESSION['student_form']['school_short_name']);
		}
		$membership = student_from_get_membership($school['id']);
		if(!$school OR (!is_array($membership) AND $node->nid!=17)){ // if this is not a member school and if they aren't doing former student sign up
			drupal_goto('student/error');
		}
    if(arg(2)){
      if($user->uid){
        //they are logged in on this page, i.e. they are a teacher - probably not a brilliant idea since they will overright their teacher record with a student record if they submit this form, so log them out.
        $redirect = substr($_SERVER['REQUEST_URI'], 1); // substr to take off the first '/'
        watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
        module_invoke_all('user_logout', $user);
        session_destroy();
        drupal_set_message('You have been logged out so that students can fill in this form.');
        $_SESSION['student_form']['school_short_name'] = arg(2);
        drupal_goto($redirect);
      }
      $_SESSION['student_form']['school_short_name'] = arg(2);
    }
	}
}

function student_form_node_load($nodes, $types){
    //an array that defines the school field for each node.
    $school_field = array(
        '5' => 'civicrm_2_contact_1_contact_existing',
        '8' => 'civicrm_2_contact_1_contact_existing',
        '14' => 'civicrm_5_contact_1_contact_existing',
        '17' => 'civicrm_2_contact_1_contact_existing'
    );
	foreach ($school_field as $node_id => $field){
	    if(is_object($nodes[$node_id])){
	        student_form_prepopulate_school_component($nodes[$node_id], $field);
        }
    }
    	
}

function student_form_prepopulate_school_component(&$node, $field){
    $school = student_form_get_school();
    foreach($node->webform['components'] as $cid => $component){
		if($component['form_key'] == $field){
			$node->webform['components'][$cid]['extra']['default']='contact_id';
			$node->webform['components'][$cid]['extra']['default_contact_id']=$school['id'];
		} 
	}
}

